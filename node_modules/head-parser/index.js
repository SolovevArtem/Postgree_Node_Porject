
var Parser = require('htmlparser2').Stream
var debug = require('debug')('head-parser')

module.exports = function (stream, done) {
  var parser = new Parser()
  stream.pipe(parser)

  var obj = {
    meta: [],
    links: [],
  }

  stream.on('error', finish)
  parser.on('opentag', onopentag)
  parser.on('closetag', onclosetag)
  parser.on('error', finish)
  parser.on('end', finish)

  return function (fn) {
    done = fn
  }

  function finish(err) {
    stream.unpipe(parser)

    stream.removeListener('error', finish)
    parser.removeListener('opentag', onopentag)
    parser.removeListener('closetag', onclosetag)
    parser.removeListener('error', finish)
    parser.removeListener('end', finish)

    // in case an error is emitted afterwards,
    // we don't want it to crash the process.
    parser.on('error', noop)

    done(err, obj)

    stream = parser = obj = null
  }

  function onopentag(name, attributes) {
    debug('open: ' + name)

    switch (name) {
      case 'body': return finish()
      case 'meta': return obj.meta.push(attributes)
      case 'link': return obj.links.push(attributes)
      case 'title':
        // already parsed - duplicate maybe
        if (typeof obj.title === 'string') return
        parser.on('text', ontitle)
        parser.on('opentag', offtitle)
        parser.on('closetag', offtitle)
        return
    }
  }

  function onclosetag(name) {
    debug('close: ' + name)

    switch (name) {
      case 'head':
      case 'html':
        return finish()
    }
  }

  function ontitle(title) {
    offtitle()
    obj.title = title || ''
  }

  function offtitle() {
    parser.removeListener('text', ontitle)
    parser.removeListener('opentag', offtitle)
    parser.removeListener('closetag', offtitle)
  }
}

function noop() {}
